View(data)
# Load data.
data <- read.csv("../Data/data_clean.csv", header=TRUE, sep= ",")
View(data)
X <- data[, -which(names(data) == "Total.Uninjured")]
Y <- data$Total.Uninjured
X <- data[, -which(names(data) == "Total.Uninjured")]
y <- data$Total.Uninjured
View(X)
X <- data[, -which(names(data) == "Total.Uninjured")]
y <- data["Total.Uninjured"]
# Import libraries.
library(rpart)
library(dplyr)
library(ggplot2) # CART
library(partykit) # CART
library(pscl) # Zero Inflated Poisson Model
# Set working directory to this one.
setwd("C:/Users/g_gna/Documents/TCD/Modules/CS7DS1_DataAnalytics/Project/Code")
# Load data.
data <- read.csv("../Data/data_clean.csv", header=TRUE, sep= ",")
X <- data[, -which(names(data) == "Total.Uninjured")]
y <- data["Total.Uninjured"]
View(y)
View(X)
model_zip <- zeroinfl("Total.Uninjured" ~ ., data = data, dist = "poisson")
model_zip <- zeroinfl(Total.Uninjured ~ ., data = data, dist = "poisson")
summary(model_zip)
?glm
model_zip <- zeroinfl(Total.Uninjured ~ ., data = data, dist = "poisson")
model_hurdle <- hurdle(Total.Uninjured ~ ., data = data, dist = "poisson")
library(pscl) # Zero inflated poisson model.
# Import libraries.
library(rpart)
library(dplyr)
library(ggplot2) # CART
library(partykit) # CART
library(pscl) # Zero inflated poisson model.
library(MASS) # Poisson and negative binomial models.
# Import libraries.
library(rpart)
library(dplyr)
library(ggplot2) # CART
library(partykit) # CART
library(pscl) # Zero inflated poisson model.
library(MASS) # Poisson and negative binomial models.
# Set working directory to this one.
setwd("C:/Users/g_gna/Documents/TCD/Modules/CS7DS1_DataAnalytics/Project/Code")
# Load data.
data <- read.csv("../Data/data_clean.csv", header=TRUE, sep= ",")
# X <- data[, -which(names(data) == "Total.Uninjured")]
# y <- data["Total.Uninjured"]
# 1. Poisson Model
model_poisson <- glm(Total.Uninjured ~ ., data = data, family = "poisson")
# 2. Zero-Inflated Poisson (ZIP) Model
model_zip <- zeroinfl(Total.Uninjured ~ ., data = data, dist = "poisson")
# 3. Negative Binomial Model
model_negbin <- glm.nb(Total.Uninjured ~ ., data = data)
# 4. Hurdle Model
model_hurdle <- hurdle(Total.Uninjured ~ ., data = data, dist = "poisson")
?train
ctrl <- trainControl(method = "cv", number = 10) # Set up training control.
library(caret) # For cross validation.
?createDataPartition
??createDataPartition
index <- createDataPartition(data$Total.Uninjured, p = 0.8, list = FALSE)
library(caret) # For cross validation.
index <- createDataPartition(data$Total.Uninjured, p = 0.8, list = FALSE)
View(index)
train_data <- data[index, ]
View(train_data)
index <- createDataPartition(data$Total.Uninjured, p = 0.8)
folds = createFolds(data_train$Total.Uninjured, k = 10)
index <- createDataPartition(data$Total.Uninjured, p = 0.8, list = FALSE)
data_train <- data[index, ]
data_test <- data[-index, ]
folds = createFolds(data_train$Total.Uninjured, k = 10)
y_pred <- model_poisson.predict(data[1:1000, ])
y_pred <- predict(model_poisson, newdata = new_data, type = "response")
y_pred <- predict(model_poisson, newdata = data[1:1000, ], type = "response")
y_pred
mse <- function(y, y_pred) {
# Computes mean squared error given.
# @param y: Truth.
# @param y_pred: Predictions.
# @return: Mean of squared residuals.
residuals <- observed - predicted
squared_error <- residuals^2
mse <- mean(squared_errors)
return(mse)
}
y <- data[1:1000, ]$Total.Uninjured
y_pred <- predict(model_poisson, newdata = data[1:1000, ], type = "response")
y
y_pred
error <- mse(y, y_pred)
mse <- function(y, y_pred) {
# Computes mean squared error given.
# @param y: Truth.
# @param y_pred: Predictions.
# @return: Mean of squared residuals.
residuals <- y - y_pred
squared_error <- residuals^2
mse <- mean(squared_errors)
return(mse)
}
error <- mse(y, y_pred)
mse <- function(y, y_pred) {
# Computes mean squared error given.
# @param y: Truth.
# @param y_pred: Predictions.
# @return: Mean of squared residuals.
residuals <- y - y_pred
squared_error <- residuals^2
mse <- mean(squared_error)
return(mse)
}
error <- mse(y, y_pred)
View(mse)
mse
folds = createFolds(data_train$Total.Uninjured, k = 10)
cv = lapply(folds, function(index_validate) {
fold_train = data_train[-index_validate, ]
fold_validate = data_train[index_validate, ]
model <- glm(Total.Uninjured ~ ., data=data, family="poisson")
y <- fold_train$Total.Uninjured
y_pred <- predict(model, newdata=fold_train, type="response")
error <- mse(y, y_pred)
return(error)
})
cv
cv = mean(lapply(folds, function(index_validate) {
fold_train = data_train[-index_validate, ]
fold_validate = data_train[index_validate, ]
model <- glm(Total.Uninjured ~ ., data=data, family="poisson")
y <- fold_train$Total.Uninjured
y_pred <- predict(model, newdata=fold_train, type="response")
error <- mse(y, y_pred)
return(error)
}))
cv = lapply(folds, function(index_validate) {
fold_train = data_train[-index_validate, ]
fold_validate = data_train[index_validate, ]
model <- glm(Total.Uninjured ~ ., data=data, family="poisson")
y <- fold_train$Total.Uninjured
y_pred <- predict(model, newdata=fold_train, type="response")
error <- mse(y, y_pred)
return(error)
})
mean(cv)
mean(as.numeric((cv)))
cv = mean(as.numeric(lapply(folds, function(index_validate) {
fold_train = data_train[-index_validate, ]
fold_validate = data_train[index_validate, ]
model <- glm(Total.Uninjured ~ ., data=data, family="poisson")
y <- fold_train$Total.Uninjured
y_pred <- predict(model, newdata=fold_train, type="response")
error <- mse(y, y_pred)
return(error)
})))
cv
cv10fold(model_type="poisson")
# 2. Create 10 folds of the train data set.
cv10fold <- function(model_type) {
cv = mean(as.numeric(lapply(folds, function(index_validate) {
fold_train = data_train[-index_validate, ]
fold_validate = data_train[index_validate, ]
if (model_type == 'poisson') {
model <- glm(Total.Uninjured ~ ., data=fold_train, family="poisson")
} else if (model_type == 'negbin') {
model <- glm.nb(Total.Uninjured ~ ., data=fold_train)
} else if (model_type == 'zip') {
model <- zeroinfl(Total.Uninjured ~ ., data=fold_train, dist="poisson")
} else if (model_type == 'znib') {
model <- zeroinfl(Total.Uninjured ~ ., data=fold_train, dist="negbin")
} else if (model_type == 'hurdle_p') {
model <- zeroinfl(Total.Uninjured ~ ., data=fold_train, dist="negbin")
} else { # model_type == 'hurdle_negbin
model <- hurdle(Total.Uninjured ~ ., data = data, dist = "negbin")
}
y <- fold_train$Total.Uninjured
y_pred <- predict(model, newdata=fold_train, type="response")
error <- mse(y, y_pred)
return(error)
})))
return(cv)
}
cv10fold('poisson')
cv10fold('neg_bin', data_train)
cv10fold <- function(model_type, data) {
# Returns average MSE after 10 fold cross validation.
# @param model_type: Name of the type of model to use.
# @param data: Data to perform 10 fold cv using.
# @return: Average of MSE values across 10 folds.
res_cv = mean(as.numeric(lapply(folds, function(index_validate) {
fold_train = data_train[-index_validate, ]
fold_validate = data_train[index_validate, ]
if (model_type == 'poisson') {
model <- glm(Total.Uninjured ~ ., data=fold_train, family="poisson")
} else if (model_type == 'negbin') {
model <- glm.nb(Total.Uninjured ~ ., data=fold_train)
} else if (model_type == 'zip') {
model <- zeroinfl(Total.Uninjured ~ ., data=fold_train, dist="poisson")
} else if (model_type == 'znib') {
model <- zeroinfl(Total.Uninjured ~ ., data=fold_train, dist="negbin")
} else if (model_type == 'hurdle_p') {
model <- zeroinfl(Total.Uninjured ~ ., data=fold_train, dist="negbin")
} else { # model_type == 'hurdle_negbin
model <- hurdle(Total.Uninjured ~ ., data = data, dist = "negbin")
}
y <- fold_train$Total.Uninjured
y_pred <- predict(model, newdata=fold_train, type="response")
error <- mse(y, y_pred)
return(error)
}))) # Cross validation result.
return(res_cv)
}
cv10fold('negbin', data_train)
cv10fold('zip', data_train)
cv10fold('zinb', data_train)
cv10fold('poisson', data_train)
cv10fold('hurdle_p', data_train)
cv10fold('hurdle_negbin', data_train)
get_best_model <- function(data) {
model_types <- list('poisson', 'negbin', 'zip', 'zinb', 'hurdle_p', 'hurdle_negbin')
res_cv <- list()
for (model_type in model_types) {
res_cv <- append(res_cv, cv10fold(model_type, data))
}
lowest_avg_mse <- model_types[which.min(res_cv)]
return(lowest_avg_mse)
}
get_best_model(data_train)
get_best_model <- function(data) {
print('Determining best model through 10 Fold CV.')
model_types <- list('poisson', 'negbin', 'zip', 'zinb', 'hurdle_p', 'hurdle_negbin')
res_cv <- list()
for (model_type in model_types) {
res_cv <- append(res_cv, cv10fold(model_type, data))
print(paste('Evaluated model:', model_type))
}
model_best <- model_types[which.min(res_cv)]
print(paste('Model resulting in lowest avg. MSE across 10 folds =', model_best))
return(model_best)
}
get_best_model(data_train)
cls
# Import libraries.
library(rpart)
library(dplyr)
library(ggplot2) # CART
library(partykit) # CART
library(pscl) # Zero inflated poisson model.
library(MASS) # Poisson and negative binomial models.
library(caret) # For cross validation.
### Utility Functions
mse <- function(y, y_pred) {
# Computes mean squared error given.
# @param y: Truth.
# @param y_pred: Predictions.
# @return: Mean of squared residuals.
residuals <- y - y_pred
squared_error <- residuals^2
mse <- mean(squared_error)
return(mse)
}
cv10fold <- function(model_type, data) {
# Returns average MSE after 10 fold cross validation.
# @param model_type: Name of the type of model to use.
# @param data: Data to perform 10 fold cv using.
# @return: Average of MSE values across 10 folds.
res_cv = mean(as.numeric(lapply(folds, function(index_validate) {
fold_train = data_train[-index_validate, ]
fold_validate = data_train[index_validate, ]
if (model_type == 'poisson') {
model <- glm(Total.Uninjured ~ ., data=fold_train, family="poisson")
} else if (model_type == 'negbin') {
model <- glm.nb(Total.Uninjured ~ ., data=fold_train)
} else if (model_type == 'zip') {
model <- zeroinfl(Total.Uninjured ~ ., data=fold_train, dist="poisson")
} else if (model_type == 'znib') {
model <- zeroinfl(Total.Uninjured ~ ., data=fold_train, dist="negbin")
} else if (model_type == 'hurdle_p') {
model <- zeroinfl(Total.Uninjured ~ ., data=fold_train, dist="negbin")
} else if (model_type == 'hurdle_negbin') {
model <- hurdle(Total.Uninjured ~ ., data = data, dist = "negbin")
} else { # Invalid model.
return (-1)
}
y <- fold_train$Total.Uninjured
y_pred <- predict(model, newdata=fold_train, type="response")
error <- mse(y, y_pred)
return(error)
}))) # Cross validation result.
return(res_cv)
}
### Main
# Set working directory to this one.
setwd("C:/Users/g_gna/Documents/TCD/Modules/CS7DS1_DataAnalytics/Project/Code")
# Load data.
data <- read.csv("../Data/data_clean.csv", header=TRUE, sep=",")
# 1. Poisson Model
model_poisson <- glm(Total.Uninjured ~ ., data=data, family="poisson")
# 2. Negative Binomial Model
model_negbin <- glm.nb(Total.Uninjured ~ ., data=data)
# 3. Zero-Inflated Models
model_zip <- zeroinfl(Total.Uninjured ~ ., data=data, dist="poisson")
model_zinb <- zeroinfl(Total.Uninjured ~ ., data=data, dist="negbin")
# 4. Hurdle Model
model_hurdle_p <- hurdle(Total.Uninjured ~ ., data=data, dist="poisson")
model_hurdle_nb <- hurdle(Total.Uninjured ~ ., data=data, dist="negbin")
### 10 Fold Cross validation.
# 1. Train - test split.
index_train <- createDataPartition(data$Total.Uninjured, p = 0.8, list = FALSE)
data_train <- data[index_train, ]
data_test <- data[-index_train, ]
# 2. Create 10 folds of the train data set.
get_best_model <- function(data) {
print('Determining best model through 10 Fold CV.')
model_types <- list('poisson', 'negbin', 'zip', 'zinb', 'hurdle_p', 'hurdle_negbin')
res_cv <- list()
for (model_type in model_types) {
res_cv <- append(res_cv, cv10fold(model_type, data))
print(paste('Evaluated model:', model_type))
}
model_best <- model_types[which.min(res_cv)]
print(paste('Model resulting in lowest avg. MSE across 10 folds =', model_best))
return(model_best)
}
best_model <- get_best_model()
View(cv10fold)
library(caret) # For cross validation.
# Load data.
data <- read.csv("../Data/data.csv", header=TRUE, sep=",")
View(data)
# Import libraries.
library(rpart)
library(dplyr)
library(ggplot2)
library(partykit)
# Set working directory to this one.
setwd("C:/Users/g_gna/Documents/TCD/Modules/CS7DS1_DataAnalytics/Project/Code")
data <- read.csv("../Data/data.csv", header=TRUE, sep= ",")
str(data)
data <- as.data.frame(data[, c('absences', 'course', 'school', 'sex', 'age', 'address', 'famsize', 'Medu', 'Fedu', 'Mjob', 'Fjob', 'guardian', 'traveltime', 'studytime', 'failures', 'schoolsup', 'famsup', 'activities', 'higher', 'internet', 'romantic', 'famrel', 'freetime', 'goout', 'Dalc', 'Walc', 'health', 'G3')])
head(data)
# Check length of columns.
for (column in names(data)) {
print(paste(column, "= ", length(data[, c(column)])))
}
num_rows_na <- sum(rowSums(is.na(data)) > 0) # 11140
num_rows_not_na <- nrow(data) - num_rows_na # 77749
num_rows_na
num_rows_not_na
# Examining feature category value counts.
for (col in names(data)) {
print(paste("Value Counts - Column '", col, "'"))
print(as.data.frame(table(data[col])))
print("\n")
}
for (col in names(data)) {
print(paste("Value Counts - Column '", col, "'"))
print(as.data.frame(table(data[col])))
cat("\n")
}
num_rows_blank <- sum(rowSums(data == "" | data == " ") > 0) # 71449
num_rows_not_blank <- nrow(data) - num_rows_blank # 6300
num_rows_blank
# Splitting data into X and y.
X <- data[, -which(names(data) == "absences")]
y <- data$absences
# View data.
print(summary(y)) # Mean = 3.437
print(paste("Variance:", var(y))) # Variance = 525.528
print(paste("No. of 0s:", sum(y == 0)))
print(paste("No. of non 0s:", sum(y != 0)))
print('Y Value Counts:')
print(table(y))
y_bar <- barplot(table(y))
print(paste('No. of rows =', length(y)))
y_bar <- barplot(table(y))
print(paste('No. of rows =', length(y)))
?barplot
# Save cleaned data.
write.csv(data_clean, file = "data_clean.csv", row.names = FALSE)
# Save cleaned data.
write.csv(data, file = "data_clean.csv", row.names = FALSE)
# Import libraries.
library(rpart)
library(dplyr)
library(ggplot2) # CART
library(partykit) # CART
library(pscl) # Zero inflated poisson model.
library(MASS) # Poisson and negative binomial models.
library(caret) # For cross validation.
# Set working directory to this one.
setwd("C:/Users/g_gna/Documents/TCD/Modules/CS7DS1_DataAnalytics/Project/Code")
# Load data.
data <- read.csv("../Data/data_clean.csv", header=TRUE, sep=",")
# Set working directory to this one.
setwd("C:/Users/g_gna/Documents/TCD/Modules/CS7DS1_DataAnalytics/Project/Data")
# Load and view data.
data <- read.csv("./data.csv", header=TRUE, sep= ",")
str(data)
# Load data.
data <- read.csv("../Data/data_clean.csv", header=TRUE, sep=",")
# Load data.
data <- read.csv("../Data/data_clean.csv", header=TRUE, sep=",")
View(data)
# Load data.
data <- read.csv("../Data/data_clean.csv", header=TRUE, sep=",")
# 1. Poisson Model
model_poisson <- glm(absences ~ ., data=data, family="poisson")
# 2. Negative Binomial Model
model_negbin <- glm.nb(absences ~ ., data=data)
# 3. Zero-Inflated Models
model_zip <- zeroinfl(absences ~ ., data=data, dist="poisson")
model_zinb <- zeroinfl(absences ~ ., data=data, dist="negbin")
# 4. Hurdle Model
model_hurdle_p <- hurdle(absences ~ ., data=data, dist="poisson")
model_hurdle_nb <- hurdle(absences ~ ., data=data, dist="negbin")
library(readr)
library(stats)
model = glm(absences ~ ., data=data, family="poisson")
# 2. Get partial score residuals.
part_score_res = residuals(model, type = "pearson")
part_score_res
model <- glm(absences ~ ., data=data, family="poisson")
# 2. Get partial score residuals.
part_score_res <- residuals(model, type = "pearson")
part_score_res
model <- glm(absences ~ ., data=data, family="poisson")
part_score_res <- residuals(model, type = "pearson")
View(model_hurdle_nb)
part_score_res
data$part_score_res <- part_score_res
View(data)
sign_group <- ifelse(sign(part_score_res) == 1, "+", "-")
sign_group <- ifelse(sign(part_score_res) == 1, "positive", "negative")
part_score_res$sign_group <- sign_group
?table
part_score_res <- as.data.frame((residuals(model, type = "pearson"))
part_score_res
part_score_res <- as.data.frame(residuals(model, type = "pearson"))
part_score_res
View(part_score_res)
?as.data.frame
View(part_score_res)
part_score_res <- as.data.frame(residuals(model, type = "pearson"), row.names = c('part_score_res'))
part_score_res <- as.data.frame(residuals(model, type = "pearson"), col.names = c('part_score_res'))
part_score_res
View(part_score_res)
part_score_res <- as.data.frame(residuals(model, type = "pearson"))
colnames(part_score_res) <- "part_score_res"
View(part_score_res)
part_score_res$sign_group <- ifelse(sign(part_score_res) == 1, "positive", "negative")
View(model_zip)
View(part_score_res)
part_score_res$sign_group <- ifelse(sign(part_score_res$part_score_res) == 1, "positive", "negative")
View(part_score_res)
X <- data[, -which(names(data) == 'absences')]
y <- data$absences
col_types <- get_col_type(X)
get_col_type <- function(data) {
# Computes wheter each column in the data set is
# categorical or non-categorical in nature.
# @param data: Data table.
# @return: List of the column type 'cat'
#          or 'nocat' associated with each
#          column in the given data table.
# Initialize an empty vector to store the column types.
column_types <- vector(mode = "character", length = ncol(data_table))
# Loop through each column and determine its type.
for (i in seq_along(data_table)) {
if (is.factor(data_table[[i]]) || is.character(data_table[[i]])) {
column_types[i] <- "categorical"
} else {
column_types[i] <- "non_categorical"
}
}
return(column_types)
}
col_types <- get_col_type(X)
get_col_type <- function(data) {
# Computes whether each column in the data set is
# categorical or non-categorical in nature.
# @param data: Data table.
# @return: List of the column type 'cat'
#          or 'nocat' associated with each
#          column in the given data table.
# Initialize an empty vector to store the column types.
column_types <- vector(mode = "character", length = ncol(data))
# Loop through each column and determine its type.
for (i in seq_along(data)) {
if (is.factor(data[[i]]) || is.character(data[[i]])) {
column_types[i] <- "cat"
} else {
column_types[i] <- "nocat"
}
}
return(column_types)
}
col_types <- get_col_type(X)
data <- read.csv("../Data/data_clean.csv", header=TRUE, sep=",")
X <- data[, -which(names(data) == 'absences')]
y <- data$absences
col_types <- get_col_type(X)
Xcat <- X[, which(col_types == "cat", drop = FALSE)]
Xcat <- X[, which(col_types == "cat"), drop = FALSE]
Xnocat <- X[, which(col_types == "nocat"), drop = FALSE]
Xcat
Xnocat
